package com.ardikars.jxpacket.benchmark;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufAllocator;
import io.netty.buffer.PooledByteBufAllocator;
import io.netty.util.ResourceLeakDetector;
import io.netty.util.internal.StringUtil;
import com.ardikars.jxpacket.ethernet.Ethernet;
import org.openjdk.jmh.runner.RunnerException;
import org.pcap4j.packet.EthernetPacket;
import org.pcap4j.packet.IllegalRawDataException;

import java.io.IOException;

public class Main {

	protected static final String ETHERNET_II_IEEE_802_1ad_802_1Q_IPV4 =
			"00000000000000109400001588a8001e810020650800450005c254b00000fffdddbdc0550117c055010ffdccd64218db64ea845f880dd1739726263f12ece8e831b";

	public static void main(String[] args) throws IOException, RunnerException, IllegalRawDataException {
//		org.openjdk.jmh.Main.main(args);
		ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.ADVANCED);
		ByteBufAllocator allocator = PooledByteBufAllocator.DEFAULT;

		byte[] data = StringUtil.decodeHexDump(ETHERNET_II_IEEE_802_1ad_802_1Q_IPV4);
		ByteBuf buf = allocator.directBuffer(data.length);
		buf.setBytes(0, data);

		long start = System.currentTimeMillis();
		Ethernet ethernet = Ethernet.newPacket(buf);
		long end = System.currentTimeMillis();
		ethernet.forEach(packet -> System.out.println(packet.getHeader().getBuffer()));
		buf.clear();
		System.out.println("Time : " + (end - start));

		start = System.currentTimeMillis();
		EthernetPacket ethernetPacket = EthernetPacket.newPacket(data, 0, data.length);
		end = System.currentTimeMillis();
		ethernetPacket.forEach(System.out::println);
		System.out.println("Time : " + (end - start));
	}
}
